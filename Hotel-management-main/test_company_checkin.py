#!/usr/bin/env python3
"""
Test script cho t√≠nh nƒÉng check-in c√¥ng ty v·ªõi nhi·ªÅu kh√°ch
"""

import requests
import json
from datetime import datetime, timezone

BASE_URL = "http://127.0.0.1:8001/api"

def test_company_checkin():
    """Test check-in v·ªõi c√¥ng ty v√† nhi·ªÅu kh√°ch"""
    
    print("=== TEST CHECK-IN C√îNG TY V·ªöI NHI·ªÄU KH√ÅCH ===\n")
    
    # 1. L·∫•y danh s√°ch ph√≤ng tr·ªëng
    print("1. L·∫•y danh s√°ch ph√≤ng...")
    response = requests.get(f"{BASE_URL}/rooms")
    rooms = response.json()
    
    empty_rooms = [room for room in rooms if room['status'] == 'empty']
    if not empty_rooms:
        print("‚ùå Kh√¥ng c√≥ ph√≤ng tr·ªëng ƒë·ªÉ test!")
        return
    
    room = empty_rooms[0]
    print(f"‚úÖ T√¨m th·∫•y ph√≤ng tr·ªëng: {room['number']} (ID: {room['id']})")
    
    # 2. Test check-in c√¥ng ty v·ªõi nhi·ªÅu kh√°ch
    print("\n2. Test check-in c√¥ng ty v·ªõi nhi·ªÅu kh√°ch...")
    
    checkin_data = {
        "company_name": "C√¥ng ty TNHH ABC",
        "guests": [
            {
                "name": "Nguy·ªÖn VƒÉn A",
                "phone": "0123456789",
                "email": "a@abc.com",
                "id_card": "123456789"
            },
            {
                "name": "Tr·∫ßn Th·ªã B", 
                "phone": "0987654321",
                "email": "b@abc.com",
                "id_card": "987654321"
            },
            {
                "name": "L√™ VƒÉn C",
                "phone": "0111222333",
                "email": "c@abc.com", 
                "id_card": "111222333"
            }
        ],
        "booking_type": "daily",
        "duration": 2,
        "check_in_date": datetime.now(timezone.utc).isoformat()
    }
    
    response = requests.post(
        f"{BASE_URL}/rooms/{room['id']}/checkin-company",
        json=checkin_data
    )
    
    if response.status_code == 200:
        result = response.json()
        print(f"‚úÖ Check-in th√†nh c√¥ng!")
        print(f"   C√¥ng ty: {result['company_name']}")
        print(f"   S·ªë kh√°ch: {len(result['guests'])}")
        print(f"   T√™n kh√°ch: {[guest['name'] for guest in result['guests']]}")
        print(f"   T·ªïng chi ph√≠: {result['total_cost']:,.0f} VND")
        room_id = result['id']
    else:
        print(f"‚ùå Check-in th·∫•t b·∫°i: {response.text}")
        return
    
    # 3. Test l·∫•y th√¥ng tin kh√°ch trong ph√≤ng
    print("\n3. Test l·∫•y th√¥ng tin kh√°ch trong ph√≤ng...")
    response = requests.get(f"{BASE_URL}/rooms/{room_id}/guests")
    
    if response.status_code == 200:
        guests_info = response.json()
        print(f"‚úÖ L·∫•y th√¥ng tin th√†nh c√¥ng:")
        print(f"   Ph√≤ng: {guests_info['room_number']}")
        print(f"   C√¥ng ty: {guests_info['company_name']}")
        print(f"   Danh s√°ch kh√°ch:")
        for i, guest in enumerate(guests_info['guests'], 1):
            print(f"     {i}. {guest['name']} - SƒêT: {guest['phone']} - Email: {guest['email']}")
    else:
        print(f"‚ùå L·ªói l·∫•y th√¥ng tin: {response.text}")
    
    # 4. Test t√≠nh to√°n chi ph√≠ hi·ªán t·∫°i
    print("\n4. Test t√≠nh to√°n chi ph√≠ hi·ªán t·∫°i...")
    response = requests.get(f"{BASE_URL}/rooms/{room_id}/current-cost")
    
    if response.status_code == 200:
        cost_info = response.json()
        print(f"‚úÖ T√≠nh to√°n th√†nh c√¥ng:")
        print(f"   C√¥ng ty: {cost_info['company_name']}")
        print(f"   Chi ph√≠ hi·ªán t·∫°i: {cost_info['total_cost']:,.0f} VND")
        print(f"   Chi ti·∫øt: {cost_info['details']}")
    else:
        print(f"‚ùå L·ªói t√≠nh to√°n: {response.text}")
    
    # 5. Test check-out
    print("\n5. Test check-out...")
    response = requests.post(f"{BASE_URL}/rooms/{room_id}/checkout")
    
    if response.status_code == 200:
        checkout_result = response.json()
        print(f"‚úÖ Check-out th√†nh c√¥ng!")
        print(f"   C√¥ng ty: {checkout_result['company_name']}")
        print(f"   S·ªë kh√°ch: {len(checkout_result['guests'])}")
        print(f"   T·ªïng chi ph√≠: {checkout_result['bill']['total_cost']:,.0f} VND")
        print(f"   Chi ti·∫øt: {checkout_result['bill']['details']}")
    else:
        print(f"‚ùå Check-out th·∫•t b·∫°i: {response.text}")

def test_legacy_checkin():
    """Test check-in c≈© v·∫´n ho·∫°t ƒë·ªông"""
    
    print("\n=== TEST CHECK-IN C≈® (BACKWARD COMPATIBILITY) ===\n")
    
    # L·∫•y ph√≤ng tr·ªëng
    response = requests.get(f"{BASE_URL}/rooms")
    rooms = response.json()
    
    empty_rooms = [room for room in rooms if room['status'] == 'empty']
    if not empty_rooms:
        print("‚ùå Kh√¥ng c√≥ ph√≤ng tr·ªëng ƒë·ªÉ test!")
        return
    
    room = empty_rooms[0]
    print(f"‚úÖ T√¨m th·∫•y ph√≤ng tr·ªëng: {room['number']} (ID: {room['id']})")
    
    # Test check-in c≈©
    legacy_checkin = {
        "guest_name": "Nguy·ªÖn VƒÉn C≈©",
        "guest_phone": "0999888777",
        "guest_id": "111111111",
        "booking_type": "hourly",
        "duration": 3,
        "check_in_date": datetime.now(timezone.utc).isoformat()
    }
    
    response = requests.post(
        f"{BASE_URL}/rooms/{room['id']}/checkin",
        json=legacy_checkin
    )
    
    if response.status_code == 200:
        result = response.json()
        print(f"‚úÖ Check-in c≈© th√†nh c√¥ng!")
        print(f"   T√™n kh√°ch (legacy): {result.get('guest_name')}")
        print(f"   C√¥ng ty (auto): {result.get('company_name')}")
        print(f"   S·ªë kh√°ch: {len(result.get('guests', []))}")
        print(f"   Chi ph√≠: {result['total_cost']:,.0f} VND")
        
        # Check-out lu√¥n
        requests.post(f"{BASE_URL}/rooms/{result['id']}/checkout")
        print("‚úÖ Check-out ho√†n t·∫•t")
    else:
        print(f"‚ùå Check-in c≈© th·∫•t b·∫°i: {response.text}")

def test_migration():
    """Test migration endpoint"""
    
    print("\n=== TEST MIGRATION D·ªÆ LI·ªÜU C≈® ===\n")
    
    response = requests.post(f"{BASE_URL}/migrate/rooms")
    
    if response.status_code == 200:
        result = response.json()
        print(f"‚úÖ Migration th√†nh c√¥ng: {result['message']}")
    else:
        print(f"‚ùå Migration th·∫•t b·∫°i: {response.text}")

if __name__ == "__main__":
    try:
        test_company_checkin()
        test_legacy_checkin()
        test_migration()
        print("\nüéâ T·∫§T C·∫¢ TEST HO√ÄN TH√ÄNH!")
        
    except requests.exceptions.ConnectionError:
        print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. H√£y ƒë·∫£m b·∫£o server ƒëang ch·∫°y tr√™n port 8001!")
    except Exception as e:
        print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
